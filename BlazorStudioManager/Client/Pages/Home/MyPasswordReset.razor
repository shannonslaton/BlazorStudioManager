@layout AuthLayout
@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager navigationManager
@inject CustomAuthStateProvider CustomAuthStateProvider

<div class="StudioManagerBody">
    <div class="k-card" style="width: 80%;
                    margin: auto;
                    margin-top: 15px;">
        <div class="k-card-header">
            <h1 class="h2 font-weight-normal login-title">
                Reset Password
            </h1>
        </div>
        <div class="k-card-body">
            <div class="container">
                <EditForm OnValidSubmit="OnSubmit" Model="resetPasswordRequest">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <label class="text-danger">@ErrorMessage</label>
                    <h4>Update your password.</h4>
                    <hr />

                    @*<div class="form-group">
                        <div>
                            
                            <TelerikTextBox Width="100%" PlaceHolder="Enter Old Password"
                                            Password="HideOldPassword"
                                            @bind-Value="@resetPasswordRequest.OldPassword"></TelerikTextBox>
                            <TelerikButton OnClick="@RevealOldPassword"
                                           Class="pass-btn"
                                           Icon="@Telerik.Blazor.IconName.Unlock"
                                           Primary="true"
                                           ButtonType="ButtonType.Button" TabIndex="-1"></TelerikButton>
                        </div>
                        <ValidationMessage For="@(() => resetPasswordRequest.OldPassword)" />
                    </div>*@

                    <div class="form-group">
                        <div>
                            <TelerikTextBox Width="100%" PlaceHolder="Enter New Password"
                                            Password="HideNewPassword"
                                            @bind-Value="@resetPasswordRequest.Password"></TelerikTextBox>
                            <TelerikButton OnClick="@RevealNewPassword"
                                           Class="pass-btn"
                                           Icon="unlock"
                                           Primary="true"
                                           ButtonType="ButtonType.Button" TabIndex="-1"></TelerikButton>
                        </div>
                        <ValidationMessage For="@(() => resetPasswordRequest.Password)" />
                    </div>

                    <div class="form-group">
                        <div>
                            <TelerikTextBox Width="100%" Password="@HideConfirmPassword"
                                            PlaceHolder="Re-Enter Your New Password"
                                            @bind-Value="@resetPasswordRequest.ConfirmPassword"></TelerikTextBox>
                            <TelerikButton OnClick="@RevealConfirmPassword"
                                           Class="pass-btn"
                                           Icon="unlock"
                                           Primary="true"
                                           ButtonType="ButtonType.Button" TabIndex="-1"></TelerikButton>
                        </div>
                        <ValidationMessage For="@(() => resetPasswordRequest.ConfirmPassword)" />
                    </div>

                    <TelerikButton Id="btnCreateAccount" ButtonType="ButtonType.Submit" Class="btn btn-lg btn-primary btn-block">Update Password</TelerikButton>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Email { get; set; }
    [Parameter] public string Token { get; set; }

    string ErrorMessage { get; set; }
    string EditStatus { get; set; }
    ResetPasswordRequest resetPasswordRequest = new ResetPasswordRequest();
    bool HideOldPassword { get; set; } = true;
    bool HideNewPassword { get; set; } = true;
    bool HideConfirmPassword { get; set; } = true;


    protected override void OnInitialized()
    {
        resetPasswordRequest.OldPassword = "password";
        resetPasswordRequest.Email = Email;
        resetPasswordRequest.Token = Token;
    }

    async Task OnSubmit()
    {
        ErrorMessage = null;
        try
        {
            await CustomAuthStateProvider.ResetPassword(resetPasswordRequest);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    public async Task RevealOldPassword()
    {
        HideOldPassword = false;
        await Task.Delay(700);
        HideOldPassword = true;
    }

    public async Task RevealNewPassword()
    {
        HideNewPassword = false;
        await Task.Delay(700);
        HideNewPassword = true;
    }

    public async Task RevealConfirmPassword()
    {
        HideConfirmPassword = false;
        await Task.Delay(700);
        HideConfirmPassword = true;
    }
}
