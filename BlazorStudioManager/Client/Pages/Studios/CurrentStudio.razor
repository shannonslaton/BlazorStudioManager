@page "/currentstudio"
@inject IStudioManagerService service
@inject TimeZoneService TimeZoneService
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Telerik.WebReportDesigner.Blazor
@using Telerik.ReportViewer.Blazor
@inject HttpClient client

<h1>Logged In</h1>


<style>
    #wrd1 {
        position: relative;
        width: 1300px;
        height: 880px;
        padding-right: 50px;
    }
</style>

@if (ShowGridData)
{
    <GridReport></GridReport>
}
else
{
    @if (ShowReport)
    {
        <TelerikButton OnClick="ToggleShow">Hide Report Designer</TelerikButton>
        <WebReportDesigner DesignerId="wrd1"
                           @ref="@reportDesigner"
                           ServiceUrl="/api/reportdesigner"
                           ToolboxArea="new ToolboxAreaOptions() { Layout = ToolboxAreaLayout.List }"
                           PropertiesArea="new PropertiesAreaOptions() { Layout = PropertiesAreaLayout.Categorized }" />
    }
    else
    {
        if (IsLoading)
        {
            <h4>Loading...</h4>
        }
        else
        {
            <TelerikButton OnClick="ToggleShow">Show Report Designer</TelerikButton>

            <TelerikGrid Data="@GridData">
                <GridColumns>
                    <GridColumn Field="RecId" Title="Id" Width="150px" />
                    <GridColumn Field="CatalogName" Title="Name" Width="150px" />
                </GridColumns>
            </TelerikGrid>
        }
    }
}

@code{
    public bool IsLoading { get; set; }
    public bool ShowGridData { get; set; }
    public bool ShowReport { get; set; }
    public bool ShowReportPreview { get; set; }
    public ReportViewer reportViewer;
    public WebReportDesigner reportDesigner;
    public List<Catalog> GridData { get; set; }
    public string ReportSourceJson { get; set; }
    public string ReportTemplateName { get; set; } = "Report1.trdp";
    public PassReportDefinition passReportDefinition { get; set; } = new PassReportDefinition();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        GridData = await client.GetFromJsonAsync<List<Catalog>>("api/Catalogs");

        var reportSourceObject = new ReportSourceModel();
        reportSourceObject.Name = "ReplaceName";
        reportSourceObject.Data = GridData;
        ReportSourceJson = Newtonsoft.Json.JsonConvert.SerializeObject(reportSourceObject);
        passReportDefinition.ModelType = "Catalogs";
        passReportDefinition.NameAndData = ReportSourceJson;
        await service.SetEnums(passReportDefinition);

        IsLoading = false;
    }

    void ToggleShow()
    {
        ShowReport = !ShowReport;
    }
    void ToggleShowReportDesigner()
    {
        ShowReportPreview = !ShowReportPreview;
    }
    void ToggleGridData()
    {
        ShowGridData = !ShowGridData;
    }
}