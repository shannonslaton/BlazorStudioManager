@page "/currentstudio"
@inject IStudioManagerService service
@inject TimeZoneService TimeZoneService
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Telerik.WebReportDesigner.Blazor
@using Telerik.ReportViewer.Blazor
@inject HttpClient client

<h1>Logged In</h1>


<style>
    #wrd1 {
        position: relative;
        width: 1300px;
        height: 880px;
        padding-right: 50px;
    }

    #rv1 {
        position: relative;
        width: 100%;
        height: 600px;
    }

        li [data-action="open"], li[data-action="documentSaveAs"], li[data-action="close"] { display: none !important; }
</style>

@if (ShowReport)
{
    <TelerikButton OnClick="ToggleShow">Hide Report Designer</TelerikButton>
    <TelerikComboBox Data="@ReportDdoData" @bind-Value="ReportTemplateName" ClearButton="false"
                     OnChange="LoadReport" Filterable="true" PopupWidth="auto">
    </TelerikComboBox>
    <TelerikButton OnClick="SaveAsTemplate">Save As</TelerikButton>
    <TelerikTabStrip @bind-ActiveTabIndex="@ActiveTabIndex">

        <TabStripTab Title="Designer">
            <WebReportDesigner DesignerId="wrd1"
                               @ref="@reportDesigner"
                               Report="@ReportTemplateName"
                               ServiceUrl="/api/reportdesigner"
                               ToolboxArea="new ToolboxAreaOptions() { Layout = ToolboxAreaLayout.List }"
                               PropertiesArea="new PropertiesAreaOptions() { Layout = PropertiesAreaLayout.Categorized }" />
        </TabStripTab>
        <TabStripTab Title="Preview">
            <ReportViewer ViewerId="rv1"
                          @ref="@reportViewer"
                          ServiceUrl="/api/reportdesigner"
                          ReportSource="@(new ReportSourceOptions()
                          {
                            Report = @ReportSourceJson
                          })"
                          TemplateUrl="/telerikReportViewerTemplate.html"
                          ScaleMode="@(ScaleMode.Specific)"
                          Scale="1.0" />
        </TabStripTab>
    </TelerikTabStrip>
}
else
{
    if (IsLoading)
    {
        <h4>Loading...</h4>
    }
    else
    {
        <TelerikButton OnClick="ToggleShow">Show Report Designer</TelerikButton>

        <TelerikGrid Data="@GridData" @ref="Grid" OnStateChanged="@((GridStateEventArgs<Catalog> args) => OnStateChangedHandler(args))"
                     Navigable="true" SortMode="@SortMode.Multiple" ShowColumnMenu="true" Sortable="true" FilterMode="Telerik.Blazor.GridFilterMode.FilterMenu" FilterMenuType="FilterMenuType.CheckBoxList"
                     Resizable="true" Reorderable="true"
                     OnStateInit="@((GridStateEventArgs<Catalog> args) => OnStateInit(args))">
            <GridColumns>
                <GridColumn Field="RecId" Title="Id" Width="150px" />
                <GridColumn Field="CatalogName" Title="Name" Width="150px" />
            </GridColumns>
        </TelerikGrid>
    }
}

@code{
    [CascadingParameter] public DialogFactory Dialogs { get; set; }

    public bool IsLoading { get; set; }
    public bool ShowReport { get; set; }
    public ReportViewer reportViewer;
    public WebReportDesigner reportDesigner;
    public TelerikGrid<Catalog> Grid;
    public List<Catalog> GridData { get; set; }
    public GridState<Catalog> savedGridState { get; set; }
    public string ReportSourceJson { get; set; }
    public string ReportTemplateName { get; set; } = "Report1.trdp";
    public PassReportDefinition passReportDefinition { get; set; } = new PassReportDefinition();
    public List<string> ReportDdoData { get; set; }
    public int ActiveTabIndex { get; set; } = 0;
    public string GridSaveName { get; set; } = "ReportCatalog";

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        GridData = await client.GetFromJsonAsync<List<Catalog>>("api/Catalogs/GetCatalogs");

        ReportDdoData = await service.GetReportTemplatesDdo();

        if (ReportDdoData.Count() > 0)
        {
            ReportTemplateName = ReportDdoData.FirstOrDefault();
        }

        var reportSourceObject = new ReportSourceCatalog();
        reportSourceObject.Name = ReportTemplateName;
        reportSourceObject.Data = GridData;
        ReportSourceJson = Newtonsoft.Json.JsonConvert.SerializeObject(reportSourceObject);
        passReportDefinition.ModelType = "Catalogs";
        await service.SetEnums(passReportDefinition);

        IsLoading = false;
    }

    async Task ToggleShow()
    {
        ShowReport = !ShowReport;

        if (ShowReport)
        {
            GridSaveName = "ReportCatalog";
            await SaveState();
            await PreviewReport();
        }
    }
    async Task SaveAsTemplate()
    {
        ShowReport = false;
        string templateName = await Dialogs.PromptAsync("Save As Name");
        var modelType = "Catalogs";

        if (templateName != null)
        {
            var testName = templateName + ".trdp";
            var exists = await client.GetFromJsonAsync<bool>($"api/ReportTemplates/DoesNameExist/{testName}/{modelType}");

            if (!exists)
            {
                ReportDdoData = new List<string>();
                var response = await client.GetFromJsonAsync<ReportTemplate>($"api/ReportTemplates/SaveAsReportTemplate/{modelType}/{ReportTemplateName}/{templateName}");
                ReportDdoData = await service.GetReportTemplatesDdo();
                await Task.Delay(10);
                ReportTemplateName = response.ReportTemplateName;
            }
            else
            {
                await Dialogs.AlertAsync("Report Name already exists.");
            }

        }

        await Task.Delay(1);
        ShowReport = true;
    }
    async Task LoadReport()
    {
        ShowReport = false;
        await Task.Delay(1);
        ShowReport = true;
    }
    async Task PreviewReport()
    {
        var reportSourceObject = new ReportSourceCatalog();
        reportSourceObject.Name = ReportTemplateName;
        reportSourceObject.Data = GridData;
        ReportSourceJson = Newtonsoft.Json.JsonConvert.SerializeObject(reportSourceObject);
        passReportDefinition.ModelType = "Catalogs";
        await service.SetEnums(passReportDefinition);
    }
    public async Task SaveState()
    {
        var gridState = Grid.GetState();

        var message = await service.PostGridSaveCatalogs(gridState, GridSaveName);
    }
    public void OnStateInit(GridStateEventArgs<Catalog> args)
    {
        try
        {
            GridSaveName = "Catalogs";
            savedGridState = new GridState<Catalog>();
        }
        catch (InvalidOperationException)
        {
            // the JS Interop for the local storage cannot be used during pre-rendering
        }
    }

    public async void OnStateChangedHandler(GridStateEventArgs<Catalog> args)
    {
        // Because applying multiple groups would make the Report-Definition more complex, only 1 grouping
        // is allowed for the grid. If another one is applied, the first one is removed/overwritten.
        if (args.PropertyName == "GroupDescriptors")
        {
            if (args.GridState.GroupDescriptors.Count > 1)
            {
                var groups = args.GridState.GroupDescriptors;
                groups.Remove(groups.First());
                await Grid.SetState(args.GridState);
            }
        }

        // Allowes the grid to be restored when switching tabs from Report back to Grid
        this.savedGridState = args.GridState;

        if (args.GridState != null)
        {
            //SetReportSourceJson(args.GridState);
        };
    }
}