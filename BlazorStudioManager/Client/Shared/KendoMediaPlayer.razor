@inject IJSRuntime js
@* Make sure Blazor does not interact with this DOM because jQuery widgets rely on DOM manipulations
    and if Blazor cleans it up or modifies it, it is likely to break the widgets *@

<div @ref="myWrapperRef">
    <div id="@WidgetId" style="height: 400px;
        margin: auto"></div>
</div>

<hr />

@code { 
    [Parameter] public string WidgetId { get; set; }
    [Parameter] public string VideoTitle { get; set; }
    [Parameter] public string VideoUrl { get; set; }

    ElementReference myWrapperRef; // we will use this to know which instance of the component calls the code
    DotNetObjectReference<KendoMediaPlayer> CurrRazorComponent { get; set; }

    // see the following article on using JS Interop, prerendering and Blazor as these approaches may change
    // https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interop?view=aspnetcore-3.0
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (CurrRazorComponent == null)
            {
                CurrRazorComponent = DotNetObjectReference.Create(this);
            }
            await js.InvokeVoidAsync("createMediaPlayer", myWrapperRef, WidgetId, VideoTitle, VideoUrl, CurrRazorComponent);

            //await js.InvokeVoidAsync("createMediaPlayer");
            // make sure the element IDs are unique in the application. In this example, the ID comes from a parameter
            // you can distinguish elements in the DOM with jQuery in other ways as well, but IDs and name attributes are often used

            // you can also pass more data and use it in the JS code as necessary by your application
        }
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("destroyWidgets", myWrapperRef);
        if (CurrRazorComponent != null)
        {
            CurrRazorComponent.Dispose();
        }
    }
}

