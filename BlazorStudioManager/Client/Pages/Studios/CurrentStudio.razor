@page "/currentstudio"
@inject IStudioManagerService service
@inject TimeZoneService TimeZoneService
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Telerik.WebReportDesigner.Blazor
@using Telerik.ReportViewer.Blazor
@inject HttpClient client
@using Telerik.DataSource;
@using System.Text.Json;
@inject IJSRuntime jsRuntime

<h1>Logged In</h1>

@if (ShowReport)
{
    <TelerikButton OnClick="ToggleShow" Title="Return to Grid" Icon="snap-grid"></TelerikButton>
    <label class="k-label">Studio Manager Templates</label>
    <TelerikSwitch @bind-Value="@ShowStudioManagerTemplates" OnChange="ShowStudioManagerTemplatesHandler" />
    <WebReportDesigner DesignerId="wrd1"
                       ServiceUrl="/api/reportdesigner"
                       ToolboxArea="new ToolboxAreaOptions() { Layout = ToolboxAreaLayout.List }"
                       PropertiesArea="new PropertiesAreaOptions() { Layout = PropertiesAreaLayout.Categorized }" />
}
else
{
    if (IsLoading)
    {
        <h4>Loading...</h4>
    }
    else
    {
        <h1>Version 1.2</h1>
        <TelerikButton OnClick="ToggleShow">Show Report Designer</TelerikButton>

        <TelerikGrid Data="@GridData" @ref="Grid"
                     Navigable="true" SortMode="@SortMode.Multiple" Sortable="true" FilterMode="Telerik.Blazor.GridFilterMode.FilterMenu" FilterMenuType="FilterMenuType.CheckBoxList"
                     Resizable="true" Reorderable="true"
                     OnStateInit="@((GridStateEventArgs<Catalog> args) => OnStateInit(args))">
            <GridColumns>
                <GridColumn Field="RecId" FieldType="@typeof(int)" Title="Id" Width="150px" />
                <GridColumn Field="CatalogName" FieldType="@typeof(string)" Title="Name" Width="150px" />
            </GridColumns>
        </TelerikGrid>
    }
}

<style>
    #wrd1 {
        position: relative;
        width: 1300px;
        height: 880px;
        padding-right: 50px;
    }


    li[data-action="close"] {
        display: none !important;
    }
</style>


@code{
    [CascadingParameter] public DialogFactory Dialogs { get; set; }

    public bool IsLoading { get; set; }
    public bool ShowReport { get; set; }
    public bool ShowStudioManagerTemplates { get; set; }
    public ReportViewer reportViewer;
    public WebReportDesigner reportDesigner;
    public TelerikGrid<Catalog> Grid;
    public List<Catalog> GridData { get; set; }
    public GridState<Catalog> savedGridState { get; set; }
    public string ReportSourceJson { get; set; }
    public string ReportTemplateName { get; set; } = "Report1.trdp";
    public PassReportDefinition passReportDefinition { get; set; } = new PassReportDefinition();
    public List<string> ReportDdoData { get; set; }
    public int ActiveTabIndex { get; set; } = 0;
    public string GridSaveName { get; set; } = "ReportCatalog";

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        GridData = await client.GetFromJsonAsync<List<Catalog>>("api/Catalogs/GetCatalogs");

        ReportDdoData = await service.GetReportTemplatesDdo();

        if (ReportDdoData.Count() > 0)
        {
            ReportTemplateName = ReportDdoData.FirstOrDefault();
        }

        var reportSourceObject = new ReportSourceCatalog();
        reportSourceObject.Name = ReportTemplateName;
        reportSourceObject.Data = GridData;
        ReportSourceJson = Newtonsoft.Json.JsonConvert.SerializeObject(reportSourceObject);
        passReportDefinition.ModelType = "Catalogs";
        await service.SetEnums(passReportDefinition);

        IsLoading = false;
    }

    void ShowStudioManagerTemplatesHandler()
    {
        jsRuntime.InvokeVoidAsync("showStudioManagerTemplates", ShowStudioManagerTemplates);
    }

    async Task ToggleShow()
    {
        ShowReport = !ShowReport;

        if (ShowReport)
        {
            GridSaveName = "ReportCatalog";
            await SaveState();
            await PreviewReport();
        }
    }
    async Task SaveAsTemplate()
    {
        ShowReport = false;
        string templateName = await Dialogs.PromptAsync("Save As Name");
        var modelType = "Catalogs";

        if (templateName != null)
        {
            var testName = templateName + ".trdp";
            var exists = await client.GetFromJsonAsync<bool>($"api/ReportTemplates/DoesNameExist/{testName}/{modelType}");

            if (!exists)
            {
                ReportDdoData = new List<string>();
                var response = await client.GetFromJsonAsync<ReportTemplate>($"api/ReportTemplates/SaveAsReportTemplate/{modelType}/{ReportTemplateName}/{templateName}");
                ReportDdoData = await service.GetReportTemplatesDdo();
                await Task.Delay(10);
                ReportTemplateName = response.ReportTemplateName;
            }
            else
            {
                await Dialogs.AlertAsync("Report Name already exists.");
            }

        }

        await Task.Delay(1);
        ShowReport = true;
    }
    async Task LoadReport()
    {
        ShowReport = false;
        var reportSourceObject = new ReportSourceCatalog();
        reportSourceObject.Name = ReportTemplateName;
        reportSourceObject.Data = GridData;
        ReportSourceJson = Newtonsoft.Json.JsonConvert.SerializeObject(reportSourceObject);
        passReportDefinition.ModelType = "Catalogs";
        await service.SetEnums(passReportDefinition);
        await Task.Delay(1);
        ShowReport = true;
    }
    async Task PreviewReport()
    {
        var reportSourceObject = new ReportSourceCatalog();
        reportSourceObject.Name = ReportTemplateName;
        reportSourceObject.Data = GridData;
        ReportSourceJson = Newtonsoft.Json.JsonConvert.SerializeObject(reportSourceObject);
        passReportDefinition.ModelType = "Catalogs";
        await service.SetEnums(passReportDefinition);
    }
    public async Task SaveState()
    {
        var gridState = Grid.GetState();

        //var passStateString = ;
        //var passState = new PassGridState()
        //{
        //    StateName = GridSaveName,
        //    StateString = JsonSerializer.Serialize(gridState)
        //};

        var message = await service.PostGridSaveCatalogs(new PassGridState()
        {
            StateName = GridSaveName,
            StateString = JsonSerializer.Serialize(gridState)
        });
    }
    public void OnStateInit(GridStateEventArgs<Catalog> args)
    {
        try
        {
            GridSaveName = "Catalogs";
            savedGridState = new GridState<Catalog>();
        }
        catch (InvalidOperationException)
        {
            // the JS Interop for the local storage cannot be used during pre-rendering
        }
    }
}